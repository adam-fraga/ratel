package project

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"

	"github.com/adam-fraga/ratel/errors"
	"github.com/adam-fraga/ratel/models/datatypes"
	// "github.com/schollz/progressbar/v3"
)

func InitProject(appName string) {
	CreateProjectStructure(appName)
}

func CreateProjectStructure(appName string) error {
	fmt.Printf("Creating the project structure for application %s...\n", appName)
	jsonFolders, err := parseJsonFolders()
	if err != nil {
		fmt.Println("Error parsing the json folders")
		fmt.Println(err.Error())
		return err
	}

	for _, folder := range jsonFolders {
		err := CreateFolder(&folder)
		if err != nil {
			fmt.Println(err.Error())
		}
	}

	return nil
}

func CreateFolder(folder *datatypes.Folder) error {
	fmt.Printf("Creating the folder %s with permissions 755...\n", folder.FolderName)

	if folder.FolderName != "root" {
		err := os.Mkdir(folder.FolderName, os.FileMode(0755))
		if err != nil {
			return &errors.Error{
				Type:       "Project Structure Error",
				Origin:     "createFolder()",
				FileOrigin: "handlers/project.go",
				Msg:        err.Error() + fmt.Sprintf("Error creating %s folder", folder.FolderName)}
		}
	}

	if len(folder.Files) > 0 {
		for _, file := range folder.Files {
			err := CreateFile(file)
			if err != nil {
				return &errors.Error{
					Type:       "Project Structure Error",
					Origin:     "createFolder()",
					FileOrigin: "handlers/project.go",
					Msg:        err.Error() + fmt.Sprintf("Error creating file %s in folder %s", file, folder.FolderName)}
			}
		}
	}

	if len(folder.SubFolders) > 0 {
		for _, subFolder := range folder.SubFolders {
			err := CreateFolder(&subFolder)
			if err != nil {
				return &errors.Error{
					Type:       "Project Structure Error",
					Origin:     "createFolder()",
					FileOrigin: "handlers/project.go",
					Msg:        err.Error() + fmt.Sprintf("Error creating subfolder %s in folder %s", subFolder.FolderName, folder.FolderName)}
			}
		}
	}

	return nil
}

func CreateFile(fileDestination string) error {
	filename := filepath.Base(fileDestination)

	fmt.Printf("Creating the file %s with permissions 755...\n", fileDestination)
	file, err := os.Create(fileDestination)
	if err != nil {
		return &errors.Error{
			Type:       "Project Structure Error",
			Origin:     "createFolder()",
			FileOrigin: "handlers/project.go",
			Msg:        err.Error() + fmt.Sprintf("Error creating %s file\n", fileDestination)}
	}

	err2 := os.Chmod(fileDestination, os.FileMode(0777))

	if err2 != nil {
		return &errors.Error{
			Type:       "Project Structure Error",
			Origin:     "createFolder()",
			FileOrigin: "handlers/project.go",
			Msg:        err2.Error() + fmt.Sprintf("Error changing permissions of %s file\n", fileDestination)}
	}

	err3 := PopulateProjectFiles(filename, fileDestination)

	if err3 != nil {
		fmt.Println(err2.Error())
		os.Exit(1)
	}

	defer file.Close()
	return nil
}

// Parse the file contains in data/configs folder and copy their content to the files in the generated project
func PopulateProjectFiles(fileName string, destinationFile string) error {
	fmt.Printf("Populating the file %s with the content of the file %s\n", destinationFile, fileName)

	configFilesPath, err := filepath.Abs("/home/afraga/Projects/ratel/data/configs/" + fileName)
	if err != nil {
		return &errors.Error{
			Type:       "Project Structure Error",
			Origin:     "parseFile()",
			FileOrigin: "handlers/project.go",
			Msg:        err.Error() + fmt.Sprintf("Error getting the absolute path of the config file %s", configFilesPath)}
	}
	fmt.Printf("successfully get configFilesPath: %s\n", configFilesPath)

	configFile, err := os.OpenFile(configFilesPath, os.O_APPEND|os.O_WRONLY, os.ModeAppend)
	if err != nil {
		configFile.Close()
		return &errors.Error{
			Type:       "Project Structure Error",
			Origin:     "parseFile()",
			FileOrigin: "handlers/project.go",
			Msg:        err.Error() + fmt.Sprintf("Error opening the config file %s\n", configFilesPath)}
	}

	fmt.Printf("successfully open configFile: %s\n", configFilesPath)

	dst, err2 := os.OpenFile(destinationFile, os.O_APPEND|os.O_WRONLY, os.ModeAppend)

	if err2 != nil {
		dst.Close()
		return &errors.Error{
			Type:       "Project Structure Error",
			Origin:     "parseFile()",
			FileOrigin: "handlers/project.go",
			Msg:        err2.Error() + fmt.Sprintf("Error opening the destination file %s\n", destinationFile)}
	}

	fmt.Printf("successfully open destinationFile: %s\n", destinationFile)

	defer configFile.Close()
	defer dst.Close()

	scanner := bufio.NewScanner(configFile)

	fmt.Printf("successfully create scanner\n")

	for scanner.Scan() {
		fmt.Println(scanner.Text())
		// line := scanner.Text()
		// _, err = dst.WriteString(line + "\n")
		fmt.Println("writing")
		if err != nil {
			return &errors.Error{
				Type:       "Project Structure Error",
				Origin:     "parseFile()",
				FileOrigin: "handlers/project.go",
				Msg:        err.Error() + fmt.Sprintf("Error writing to destination file %s", destinationFile)}
		}
		// fmt.Printf("successfully write line %s to destination file %s\n", line, destinationFile)
	}

	if err := scanner.Err(); err != nil {
		return &errors.Error{
			Type:       "Project Structure Error",
			Origin:     "parseFile()",
			FileOrigin: "handlers/project.go",
			Msg:        err.Error() + fmt.Sprintf("Error scanning the config file %s\n", configFilesPath)}
	}

	return nil
}

// Parse folders.json file to get the project structure and return Folder struct
func parseJsonFolders() ([]datatypes.Folder, error) {
	fmt.Println("Parsing the folders...")
	var folders []datatypes.Folder

	projectStructureJsonFilePath, err := filepath.Abs("/home/afraga/Projects/ratel/data/folders.json")

	if err != nil {
		return nil, &errors.Error{
			Type:       "Project Structure Error",
			Origin:     "parseJsonFolders()",
			FileOrigin: "handlers/project.go",
			Msg:        err.Error() + fmt.Sprintf("Error getting the absolute path of the json file\n")}
	}

	jsonFile, err := os.Open(projectStructureJsonFilePath)
	if err != nil {
		return nil, &errors.Error{
			Type:       "Project Structure Error",
			Origin:     "parseJsonFolders()",
			FileOrigin: "handlers/project.go",
			Msg:        err.Error() + fmt.Sprintf("Error opening the json file %s\n", projectStructureJsonFilePath)}
	}
	defer jsonFile.Close()

	err = json.NewDecoder(jsonFile).Decode(&folders)
	if err != nil {
		return nil, &errors.Error{
			Type:       "Project Structure Error",
			Origin:     "parseJsonFolders()",
			FileOrigin: "handlers/project.go",
			Msg:        err.Error() + fmt.Sprintf("Error decoding the json file %s\n", projectStructureJsonFilePath)}
	}
	return folders, nil
}
